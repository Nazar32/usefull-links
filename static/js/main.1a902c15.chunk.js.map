{"version":3,"sources":["components/Link.jsx","components/Links.jsx","App.js","serviceWorker.js","index.js"],"names":["StyledLink","styled","a","Links","data","map","dataItem","StyledGroupWrapper","key","group","StyledGroup","StyledGroupName","links","link","StyledLinkWrapper","name","to","div","ul","li","children","className","target","href","StyledWrapper","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ydAGO,IAMDA,EAAaC,IAAOC,EAAV,K,qpBCLT,IAAMC,EAAQ,SAAC,GACpB,OADiC,EAAXC,KACVC,KAAI,SAAAC,GAAQ,OACtB,kBAACC,EAAD,CAAoBC,IAAKF,EAASG,OAChC,kBAACC,EAAD,KACE,kBAACC,EAAD,KACGL,EAASG,OAGVH,EAASM,MAAMP,KAAI,SAAAQ,GAAI,OACrB,kBAACC,EAAD,CAAmBN,IAAKK,EAAKE,MAC3B,kBAAC,EAAD,CAAYC,GAAIH,EAAKA,MAAOA,EAAKE,gBASzCR,EAAqBN,IAAOgB,IAAV,KAIlBP,EAAcT,IAAOiB,GAAV,KAOXP,EAAkBV,IAAOgB,IAAV,KAQfH,EAAoBb,IAAOkB,GAAV,KAMjBnB,EAAaC,aD7CC,SAAC,GAAsC,IAApCe,EAAmC,EAAnCA,GAAII,EAA+B,EAA/BA,SAA+B,IAArBC,iBAAqB,MAAT,GAAS,EACxD,OACE,kBAACrB,EAAD,CAAYsB,OAAO,SAASC,KAAMP,EAAIK,UAAWA,GAAYD,KC2C9CnB,CAAH,K,iKChChB,IAAMuB,EAAgBvB,IAAOgB,IAAV,KAQJQ,EAlBf,WACE,OACE,yBAAKJ,UAAU,OACb,kBAACG,EAAD,KACE,kBAAC,EAAD,CAAOpB,KAAMA,OCEDsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1a902c15.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nexport const Link = ({ to, children, className = '' }) => {\n  return (\n    <StyledLink target=\"_blank\" href={to} className={className}>{children}</StyledLink>\n  );\n};\n\nconst StyledLink = styled.a`\n  color: #0052cc;\n  text-decoration: none;\n  \n  &:hover {\n    text-decoration: underline;\n  }\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Link } from './Link';\n\nexport const Links = ({ data }) => {\n  return data.map(dataItem => (\n    <StyledGroupWrapper key={dataItem.group}>\n      <StyledGroup>\n        <StyledGroupName>\n          {dataItem.group}\n        </StyledGroupName>\n        {\n          dataItem.links.map(link => (\n            <StyledLinkWrapper key={link.name}>\n              <StyledLink to={link.link}>{link.name}</StyledLink>\n            </StyledLinkWrapper>\n          ))\n        }\n      </StyledGroup>\n    </StyledGroupWrapper>\n  ));\n};\n\nconst StyledGroupWrapper = styled.div`\n  margin-bottom: 32px;\n`;\n\nconst StyledGroup = styled.ul`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  list-style: initial;\n`;\n\nconst StyledGroupName = styled.div`\n  position: relative;\n  right: 1em;\n  font-size: 19px;\n  font-weight: bold;\n  margin-bottom: 16px;\n`;\n\nconst StyledLinkWrapper = styled.li`\n  margin-bottom: 8px;\n  text-align: left;\n  list-style-position: outside;\n`;\n\nconst StyledLink = styled(Link)`\n  \n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport './App.css';\nimport data from './linksData.json';\nimport { Links } from './components/Links';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <StyledWrapper>\n        <Links data={data} />\n      </StyledWrapper>\n    </div>\n  );\n}\n\nconst StyledWrapper = styled.div`\n  margin: 64px;\n\n  @media only screen and (max-width: 600px) {\n    margin: 32px;\n  }\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './reset.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}